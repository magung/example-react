{"version":3,"sources":["List.js","ConnectAPI.js","headers.js","App.js","serviceWorker.js","index.js"],"names":["List","props","handleSubmit","event","preventDefault","setState","items","state","todoItem","handleChange","target","value","fetch","then","response","json","data","dataP","this","onSubmit","onChange","map","item","index","key","React","Component","ConnectAPI","dataItems","isLoading","id","title","body","Home","ListView","to","DetailView","match","params","name","ListItem","NoMatch","Headers","path","exact","component","App","Column","Fragment","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d310dc79.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass List extends React.Component {\n\n    constructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ttodoItem: '',\n\t\t\titems: []\n\t\t}\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tthis.setState({\n\t\t\titems    : [...this.state.items, this.state.todoItem],\n\t\t\ttodoItem : ''\n\t\t})\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\ttodoItem: event.target.value\n\t\t})\n\t\t\n\t}\n\n\t\n\t\n\t  componentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/posts\")\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({ dataP: data }))\n\t  }\n\n\n    render(){\n        const { items } = this.state\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input value={this.state.todoItem} onChange\t={this.handleChange}/>\n\t\t\t\t\t<button>Add</button>\n\t\t\t\t</form>\n                <ul>\n                    {items.map((item, index) => <li key={index}>{item}</li>)}\n                \n                </ul>\n            </div>        \n        )\n    }\n}\n\nexport default List;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n\n\nclass ConnectAPI extends Component {\n    \tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n    \t\t\tdataItems : [],\n    \t\t\tisLoading : true\n    \t\t}\n    \t}\n\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/posts\")\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({dataItems: data, isLoading : false }))\n\t}\n\t\n\t\n\n\trender() {\n    \t\tconst { dataItems, isLoading } = this.state\n\n\t\tif(isLoading){\n\t\t\treturn <p>Loading....</p>\n\t\t}\n\n\t\treturn(\t\t\t\n                <ul>\n            {dataItems.map((item, index) => \n            <li key={index}>\n                id : {item.id}<br/>\n                title : {item.title}<br/>\n                body : {item.body}\n                </li>)}\n            </ul>\n\t\t);\n\t}\n}\n\nexport default ConnectAPI;\n\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport List from './List';\nimport ConnectAPI from './ConnectAPI';\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom';\n\n\nfunction Home(){\n\treturn <h2>Halaman Home</h2>\n}\n\nfunction ListView(){\n\treturn (\n\t<div>\n\t\t<h2> Semua User</h2>\n\t\t<ul>\n\t\t\t<Link to = '/user/Agung'>Agung</Link><br/>\n\t\t\t<Link to = '/user/Maulana'>Maulana</Link>\n\t\t</ul>\n\t</div>\n\t)\n}\n\nfunction DetailView({match}){\n\treturn <h2>Ini Halaman {match.params.name}</h2>\n}\n\nfunction ListItem(){\n\treturn (\n\t\t<div>\n\t\t<List  />\n\t\t\n\t\t\t<ConnectAPI />\n\t\t</div>\n\t)\n}\n\nfunction NoMatch(){\n\treturn <h2>404, Halaman Tidak Ditemukan</h2>\n}\n\nclass Headers extends Component {\n\n\trender() {\t\t\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<nav>\n\t\t\t\t\t\t<li> <Link to = '/'>Home</Link></li>\n\t\t\t\t\t\t<li> <Link to = '/users'>User</Link></li>\n\t\t\t\t\t\t<li> <Link to = '/list'>List</Link></li>\n\t\t\t\t\t\t</nav>\n\t\t\t\t\t</div>\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path='/' exact component={Home}/>\n\t\t\t\t\t\t<Route path='/users' exact component={ListView}/>\n\t\t\t\t\t\t<Route path='/user/:name' exact component={DetailView}/>\n\t\t\t\t\t\t<Route path='/list' exact component={ListItem}/>\n\t\t\t\t\t\t<Route component={NoMatch}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</main>\n\t\t\t\t</BrowserRouter>\n\n\n\t\t\t\t\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Headers;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Headers from './headers';\n\n\n\n\nclass App extends Component {\n\n\trender() {\t\t\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<Headers />\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<Column />\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Column extends Component{\n\trender(){\n\n\t\treturn(\n\t\t\t<React.Fragment>\n\t\t\t<td>Data satu</td>\n\t\t\t<td>Data satu</td>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n\t\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n            // <App /> => sumber file jsx\n\n// const name_variabel = \"Belajar React\"\n// // const element = <h1> Mari {name_variabel}</h1>;\n\n// function greet(){\n//     return \"Marikita \" + name_variabel\n// }\n\n// const element = <h1>  {greet(name_variabel)}</h1>;\n// ReactDOM.render(element, document.getElementById('master'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}